var _root_obj = this;
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
spinalCore = require('../lib/spinalcore.node.js');

},{"../lib/spinalcore.node.js":2}],2:[function(require,module,exports){
/*
* Copyright 2015 SpinalCom - www.spinalcom.com
*
* This file is part of SpinalCore.
*
* Please read all of the following terms and conditions of the Free Software
* license Agreement ("Agreement") carefully.
*
* This Agreement is a legally binding contract between the Licensee (as defined
* below) and SpinalCom that sets forth the terms and conditions that govern
* your use of the Program. By installing and/or using the Program, you agree to
* abide by all the terms and conditions stated or referenced herein.
*
* If you do not agree to abide by these terms and conditions, do not
* demonstrate your acceptance and do not install or use the Program.
*
* You should have received a copy of the license along with this file. If not,
* see <http://resources.spinalcom.com/licenses.pdf>.
*/

// Generated by CoffeeScript 1.10.0
var root, url,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

url = require('url');

root = typeof _root_obj === "undefined" ? global : window;

root.spinalCore = (function() {
  function spinalCore() {}

  spinalCore.connect = function(options) {
    var auth;
    if (typeof options === 'string') {
      options = url.parse(options);
    }
    if (options.path.slice(-1)[0] !== "/") {
      options.path += "/";
    }
    FileSystem._home_dir = options.path;
    FileSystem._url = options.hostname;
    FileSystem._port = options.port;
    if (options.auth !== null) {
      auth = options.auth.split(":");
      FileSystem._userid = auth[0];
      if (auth.length > 1) {
        FileSystem._password = auth[1];
      }
    } else {
      FileSystem._userid = 644;
      FileSystem._password = "";
    }
    return new FileSystem;
  };

  spinalCore.store = function(fs, model, path, callback_success, callback_error) {
    var file_name, lst;
    if (typeof callback_error === "undefined") {
      callback_error = function() {
        return console.log("Model could not be stored. You can pass a callback to handle this error.");
      };
    }
    lst = path.split("/");
    file_name = lst.pop();
    if (lst[0] === "") {
      lst.splice(0, 1);
    }
    path = lst.join("/");
    return fs.load_or_make_dir(FileSystem._home_dir + path, function(dir, err) {
      var file;
      if (err) {
        return callback_error();
      } else {
        file = dir.detect(function(x) {
          return x.name.get() === file_name;
        });
        if (file != null) {
          dir.remove(file);
        }
        dir.add_file(file_name, model, {
          model_type: "Model"
        });
        return callback_success();
      }
    });
  };

  spinalCore.load = function(fs, path, callback_success, callback_error) {
    var file_name, lst;
    if (typeof callback_error === "undefined") {
      callback_error = function() {
        return console.log("Model could not be loaded. You can pass a callback to handle this error.");
      };
    }
    lst = path.split("/");
    file_name = lst.pop();
    if (lst[0] === "") {
      lst.splice(0, 1);
    }
    path = lst.join("/");
    return fs.load_or_make_dir(FileSystem._home_dir + path, function(current_dir, err) {
      var file;
      if (err) {
        return callback_error();
      } else {
        file = current_dir.detect(function(x) {
          return x.name.get() === file_name;
        });
        if (file != null) {
          return file.load((function(_this) {
            return function(data, err) {
              if (err) {
                return callback_error();
              } else {
                return callback_success(data, err);
              }
            };
          })(this));
        } else {
          return callback_error();
        }
      }
    });
  };

  spinalCore.extend = function(child, parent) {
    var child_name, ctor, key, value;
    for (key in parent) {
      value = parent[key];
      child[key] = value;
    }
    ctor = function() {
      this.constructor = child;
    };
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    child.super = function () {
            var args = [];
           	for (var i=1; i < arguments.length; i++)
                args[i-1] = arguments[i];
            child.__super__.constructor.apply(arguments[0], args);
        };
    root = typeof global !== "undefined" && global !== null ? global : this;
    child_name = /^function\s+([\w\$]+)\s*\(/.exec(child.toString())[1];
    return root[child_name] = child;
  };

  return spinalCore;

})();

module.exports = spinalCore;

root = typeof _root_obj === "undefined" ? global : window;

root.ModelProcessManager = (function() {
  function ModelProcessManager() {}

  ModelProcessManager._counter = 0;

  ModelProcessManager._modlist = {};

  ModelProcessManager._n_processes = {};

  ModelProcessManager._cur_mid = 0;

  ModelProcessManager._cur_process_id = 0;

  ModelProcessManager._timeout = void 0;

  ModelProcessManager._force_m = false;

  ModelProcessManager._synchro = void 0;

  ModelProcessManager.new_from_state = function(str) {
    var l, len, lst, map, mid, q, s;
    map = {};
    lst = str.split("\n");
    mid = lst.shift();
    for (q = 0, len = lst.length; q < len; q++) {
      l = lst[q];
      if (!l.length) {
        continue;
      }
      s = l.split(" ");
      map[s[0]] = {
        type: s[1],
        data: s[2],
        buff: void 0
      };
    }
    eval("var __new__ = new " + map[mid].type + ";");
    __new__._set_state(map[mid].data, map);
    return __new__;
  };

  ModelProcessManager.load = function(filename, func) {
    if (!ModelProcessManager.synchronizer) {
      ModelProcessManager._synchro = new Synchronizer;
    }
    return ModelProcessManager._synchro.load(filename, func);
  };

  ModelProcessManager.conv = function(v) {
    if (v instanceof Model) {
      return v;
    }
    if (v instanceof Array) {
      return new Lst(v);
    }
    if (typeof v === "string") {
      return new Str(v);
    }
    if (typeof v === "number") {
      return new Val(v);
    }
    if (typeof v === "boolean") {
      return new Bool(v);
    }
    if (v instanceof Object) {
      return new Model(v);
    }
    return new Obj(v);
  };

  ModelProcessManager.get_object_class = function(obj) {
    var arr;
    if (obj && obj.constructor && obj.constructor.toString) {
      arr = obj.constructor.toString().match(/function\s*(\w+)/);
      if (arr && arr.length === 2) {
        return arr[1];
      }
    }
  };

  ModelProcessManager._get_attribute_names = function(m) {
    var key, results, val;
    if (m instanceof Model) {
      return m._attribute_names;
    } else {
      results = [];
      for (key in m) {
        val = m[key];
        results.push(key);
      }
      return results;
    }
  };

  ModelProcessManager._new_model_from_state = function(mid, map) {
    var info;
    info = map[mid];
    eval("info.buff = new " + info.type + ";");
    info.buff._set_state(info.data, map);
    return info.buff;
  };

  ModelProcessManager._need_sync_processes = function() {
    if (ModelProcessManager._timeout == null) {
      return ModelProcessManager._timeout = setTimeout(ModelProcessManager._sync_processes, 1);
    }
  };

  ModelProcessManager._sync_processes = function() {
    var id, len, model, process, processes, q, ref, ref1, ref2;
    processes = {};
    ref = ModelProcessManager._modlist;
    for (id in ref) {
      model = ref[id];
      ref1 = model._processes;
      for (q = 0, len = ref1.length; q < len; q++) {
        process = ref1[q];
        processes[process.process_id] = {
          value: process,
          force: false
        };
      }
    }
    ref2 = ModelProcessManager._n_processes;
    for (id in ref2) {
      process = ref2[id];
      processes[id] = {
        value: process,
        force: true
      };
    }
    ModelProcessManager._timeout = void 0;
    ModelProcessManager._modlist = {};
    ModelProcessManager._n_processes = {};
    ModelProcessManager._counter += 2;
    for (id in processes) {
      process = processes[id];
      ModelProcessManager._force_m = process.force;
      process.value.onchange();
    }
    return ModelProcessManager._force_m = false;
  };

  return ModelProcessManager;

})();

root = typeof _root_obj === "undefined" ? global : window;

root.Model = (function() {
  function Model(attr) {
    this._attribute_names = [];
    this.model_id = ModelProcessManager._cur_mid;
    ModelProcessManager._cur_mid += 1;
    this._processes = [];
    this._parents = [];
    this._date_last_modification = ModelProcessManager._counter + 2;
    if (attr != null) {
      this._set(attr);
    }
  }

  Model.prototype.destructor = function() {};

  Model.prototype.has_been_modified = function() {
    return this._date_last_modification > ModelProcessManager._counter - 2 || ModelProcessManager._force_m;
  };

  Model.prototype.has_been_directly_modified = function() {
    return this._date_last_modification > ModelProcessManager._counter - 1 || ModelProcessManager._force_m;
  };

  Model.prototype.bind = function(f, onchange_construction) {
    if (onchange_construction == null) {
      onchange_construction = true;
    }
    if (f instanceof Process) {
      this._processes.push(f);
      f._models.push(this);
      if (onchange_construction) {
        ModelProcessManager._n_processes[f.process_id] = f;
        return ModelProcessManager._need_sync_processes();
      }
    } else {
      return new BindProcess(this, onchange_construction, f);
    }
  };

  Model.prototype.unbind = function(f) {
    var len, q, ref, results, v;
    if (f instanceof Process) {
      this._processes.splice(this._processes.indexOf(f), 1);
      return f._models.splice(f._models.indexOf(this), 1);
    } else {
      ref = this._processes;
      results = [];
      for (q = 0, len = ref.length; q < len; q++) {
        v = ref[q];
        if (v instanceof BindProcess && v.f === f) {
          results.push(this.unbind(v));
        }
      }
      return results;
    }
  };

  Model.prototype.get = function() {
    var len, name, q, ref, res;
    res = {};
    ref = this._attribute_names;
    for (q = 0, len = ref.length; q < len; q++) {
      name = ref[q];
      res[name] = this[name].get();
    }
    return res;
  };

  Model.prototype.set = function(value) {
    if (this._set(value)) {
      this._signal_change();
      return true;
    }
    return false;
  };

  Model.prototype.set_state = function(str) {
    var l, len, lst, map, mid, q, s;
    map = {};
    lst = str.split("\n");
    mid = lst.shift();
    for (q = 0, len = lst.length; q < len; q++) {
      l = lst[q];
      if (!l.length) {
        continue;
      }
      s = l.split(" ");
      map[s[0]] = {
        type: s[1],
        data: s[2],
        buff: void 0
      };
    }
    map[mid].buff = this;
    return this._set_state(map[mid].data, map);
  };

  Model.prototype.get_state = function(date) {
    var fmm, id, obj, res;
    if (date == null) {
      date = -1;
    }
    fmm = {};
    this._get_flat_model_map(fmm, date);
    res = this.model_id.toString();
    if (this._date_last_modification > date) {
      for (id in fmm) {
        obj = fmm[id];
        res += "\n" + obj.model_id + " " + ModelProcessManager.get_object_class(obj) + " " + obj._get_state();
      }
    }
    return res;
  };

  Model.prototype.add_attr = function(n, p, signal_change) {
    var key, results, val;
    if (signal_change == null) {
      signal_change = true;
    }
    if (p != null) {
      if (typeof p === "function") {
        return this[n] = p;
      } else {
        if (this[n] != null) {
          console.error("attribute " + n + " already exists in " + (ModelProcessManager.get_object_class(this)));
        }
        p = ModelProcessManager.conv(p);
        if (indexOf.call(p._parents, this) < 0) {
          p._parents.push(this);
        }
        this._attribute_names.push(n);
        this[n] = p;
        if (signal_change) {
          return this._signal_change();
        }
      }
    } else {
      results = [];
      for (key in n) {
        val = n[key];
        if (val != null) {
          results.push(this.add_attr(key, val, signal_change));
        }
      }
      return results;
    }
  };

  Model.prototype.rem_attr = function(name, signal_change) {
    var c, i;
    if (signal_change == null) {
      signal_change = true;
    }
    c = this[name];
    if (c) {
      i = c._parents.indexOf(this);
      if (i >= 0) {
        c._parents.splice(i, 1);
        if (c._parents.length === 0) {
          c.destructor();
        }
      }
      delete this[name];
      i = this._attribute_names.indexOf(name);
      if (i >= 0) {
        this._attribute_names.splice(i, 1);
      }
      if (signal_change) {
        return this._signal_change();
      }
    }
  };

  Model.prototype.mod_attr = function(n, p) {
    if (this[n] !== p) {
      this.rem_attr(n);
      return this.add_attr(n, p);
    }
  };

  Model.prototype.set_attr = function(o) {
    var k, len, q, r, results, to_rem, v;
    for (k in o) {
      v = o[k];
      this.mod_attr(k, v);
    }
    to_rem = (function() {
      var len, q, ref, results;
      ref = this._attribute_names;
      results = [];
      for (q = 0, len = ref.length; q < len; q++) {
        k = ref[q];
        if (o[k] == null) {
          results.push(k);
        }
      }
      return results;
    }).call(this);
    results = [];
    for (q = 0, len = to_rem.length; q < len; q++) {
      r = to_rem[q];
      results.push(this.rem_attr(r));
    }
    return results;
  };

  Model.prototype.size = function(for_display) {
    if (for_display == null) {
      for_display = false;
    }
    return [];
  };

  Model.prototype.dim = function(for_display) {
    if (for_display == null) {
      for_display = false;
    }
    return this.size(for_display).length;
  };

  Model.prototype.equals = function(m) {
    var key, len, len1, q, ref, ref1, t, u, val;
    if (this === m) {
      return true;
    }
    if (m._attribute_names != null) {
      u = {};
      ref = m._attribute_names;
      for (q = 0, len = ref.length; q < len; q++) {
        key = ref[q];
        val = m[key];
        if (this[key] == null) {
          return false;
        }
        if (!this[key].equals(val)) {
          return false;
        }
        u[key] = true;
      }
      ref1 = this._attribute_names;
      for (t = 0, len1 = ref1.length; t < len1; t++) {
        key = ref1[t];
        if (u[key] == null) {
          return false;
        }
      }
    }
    return false;
  };

  Model.prototype.get_parents_that_check = function(func_to_check) {
    var res, visited;
    res = [];
    visited = {};
    this._get_parents_that_check_rec(res, visited, func_to_check);
    return res;
  };

  Model.prototype.deep_copy = function() {
    var key, len, o, q, ref;
    o = {};
    ref = this._attribute_names;
    for (q = 0, len = ref.length; q < len; q++) {
      key = ref[q];
      o[key] = this[key].deep_copy();
    }
    eval("var __new__ = new " + (ModelProcessManager.get_object_class(this)) + ";");
    __new__.set_attr(o);
    return __new__;
  };

  Model.prototype.real_change = function() {
    var a, len, q, ref;
    if (this.has_been_directly_modified() && !this._attribute_names.length) {
      return true;
    }
    ref = this._attribute_names;
    for (q = 0, len = ref.length; q < len; q++) {
      a = ref[q];
      if (typeof this.cosmetic_attribute === "function" ? this.cosmetic_attribute(a) : void 0) {
        continue;
      }
      if (this[a].real_change()) {
        return true;
      }
    }
    return false;
  };

  Model.prototype.cosmetic_attribute = function(name) {
    return false;
  };

  Model.prototype._get_state = function() {
    var name, str;
    str = (function() {
      var len, q, ref, results;
      ref = this._attribute_names;
      results = [];
      for (q = 0, len = ref.length; q < len; q++) {
        name = ref[q];
        results.push(name + ":" + this[name].model_id);
      }
      return results;
    }).call(this);
    return str.join(",");
  };

  Model.prototype._get_fs_data = function(out) {
    var name, obj, str;
    FileSystem.set_server_id_if_necessary(out, this);
    str = (function() {
      var len, q, ref, results;
      ref = this._attribute_names;
      results = [];
      for (q = 0, len = ref.length; q < len; q++) {
        name = ref[q];
        obj = this[name];
        FileSystem.set_server_id_if_necessary(out, obj);
        results.push(name + ":" + obj._server_id);
      }
      return results;
    }).call(this);
    return out.mod += "C " + this._server_id + " " + (str.join(",")) + " ";
  };

  Model.prototype._set = function(value) {
    var change, key, len, len1, q, ref, ref1, t, used, val;
    change = false;
    used = {};
    ref = ModelProcessManager._get_attribute_names(value);
    for (q = 0, len = ref.length; q < len; q++) {
      key = ref[q];
      used[key] = true;
    }
    ref1 = (function() {
      var len1, ref1, results, w;
      ref1 = this._attribute_names;
      results = [];
      for (w = 0, len1 = ref1.length; w < len1; w++) {
        key = ref1[w];
        if (!used[key]) {
          results.push(key);
        }
      }
      return results;
    }).call(this);
    for (t = 0, len1 = ref1.length; t < len1; t++) {
      key = ref1[t];
      change = true;
      this.rem_attr(key, false);
    }
    for (key in value) {
      val = value[key];
      if (val != null) {
        if (this[key] != null) {
          if (this[key].constructor === val.constructor) {
            change |= this[key].set(val);
          } else {
            change = true;
            this.mod_attr(key, val, false);
          }
        } else {
          this.add_attr(key, val, false);
        }
      }
    }
    return change;
  };

  Model.prototype._signal_change = function(change_level) {
    var len, p, q, ref;
    if (change_level == null) {
      change_level = 2;
    }
    if (change_level === 2 && (this._server_id != null)) {
      FileSystem.signal_change(this);
    }
    ModelProcessManager._modlist[this.model_id] = this;
    if (this._date_last_modification <= ModelProcessManager._counter) {
      this._date_last_modification = ModelProcessManager._counter + change_level;
      ref = this._parents;
      for (q = 0, len = ref.length; q < len; q++) {
        p = ref[q];
        p._signal_change(1);
      }
    }
    return ModelProcessManager._need_sync_processes();
  };

  Model.prototype._set_state = function(str, map) {
    var attr, inr, k_id, len, len1, q, ref, ref1, results, spl, t, u;
    u = {};
    if (str.length) {
      ref = str.split(",");
      for (q = 0, len = ref.length; q < len; q++) {
        spl = ref[q];
        inr = spl.split(":");
        attr = inr[0];
        k_id = inr[1];
        u[attr] = true;
        if (map[k_id].buff != null) {
          if (this[attr] == null) {
            this.add_attr(attr, map[k_id].buff);
          } else if (map[k_id].buff !== this[attr]) {
            this.mod_attr(attr, map[k_id].buff);
          }
        } else if (this[attr] == null) {
          this.add_attr(attr, ModelProcessManager._new_model_from_state(k_id, map));
        } else if (!this[attr]._set_state_if_same_type(k_id, map)) {
          this.mod_attr(attr, ModelProcessManager._new_model_from_state(k_id, map));
        }
      }
    }
    ref1 = this._attribute_names;
    results = [];
    for (t = 0, len1 = ref1.length; t < len1; t++) {
      attr = ref1[t];
      if (!u[attr]) {
        results.push(this.rem_attr(attr));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Model.prototype._get_parents_that_check_rec = function(res, visited, func_to_check) {
    var len, p, q, ref, results;
    if (visited[this.model_id] == null) {
      visited[this.model_id] = true;
      if (func_to_check(this)) {
        return res.push(this);
      } else {
        ref = this._parents;
        results = [];
        for (q = 0, len = ref.length; q < len; q++) {
          p = ref[q];
          results.push(p._get_parents_that_check_rec(res, visited, func_to_check));
        }
        return results;
      }
    }
  };

  Model.prototype._set_state_if_same_type = function(mid, map) {
    var dat;
    dat = map[mid];
    if (ModelProcessManager.get_object_class(this) === dat.type) {
      dat.buff = this;
      this._set_state(dat.data, map);
      return true;
    }
    return false;
  };

  Model.prototype._get_flat_model_map = function(map, date) {
    var len, name, obj, q, ref, results;
    map[this.model_id] = this;
    ref = this._attribute_names;
    results = [];
    for (q = 0, len = ref.length; q < len; q++) {
      name = ref[q];
      obj = this[name];
      if (map[obj.model_id] == null) {
        if (obj._date_last_modification > date) {
          results.push(obj._get_flat_model_map(map, date));
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return Model;

})();

root = typeof _root_obj === "undefined" ? global : window;

root.Obj = (function(superClass) {
  extend(Obj, superClass);

  function Obj(data) {
    Obj.__super__.constructor.call(this);
    if (data != null) {
      this._set(data);
    }
  }

  Obj.prototype.toString = function() {
    var ref;
    return (ref = this._data) != null ? ref.toString() : void 0;
  };

  Obj.prototype.equals = function(obj) {
    if (obj instanceof Obj) {
      return this._data === obj._data;
    }
    return this._data === obj;
  };

  Obj.prototype.get = function() {
    return this._data;
  };

  Obj.prototype._get_fs_data = function(out) {
    FileSystem.set_server_id_if_necessary(out, this);
    return out.mod += "C " + this._server_id + " " + (this.toString()) + " ";
  };

  Obj.prototype._set = function(value) {
    if (this._data !== value) {
      this._data = value;
      return true;
    }
    return false;
  };

  Obj.prototype._get_state = function() {
    return this._data;
  };

  Obj.prototype._set_state = function(str, map) {
    return this.set(str);
  };

  return Obj;

})(Model);

root = typeof _root_obj === "undefined" ? global : window;

root.Choice = (function(superClass) {
  extend(Choice, superClass);

  function Choice(data, initial_list) {
    if (initial_list == null) {
      initial_list = [];
    }
    Choice.__super__.constructor.call(this);
    this.add_attr({
      num: 0,
      lst: initial_list
    });
    if (data != null) {
      this.num.set(data);
    }
  }

  Choice.prototype.filter = function(obj) {
    return true;
  };

  Choice.prototype.item = function() {
    return this._nlst()[this.num.get()];
  };

  Choice.prototype.get = function() {
    var ref;
    return (ref = this.item()) != null ? ref.get() : void 0;
  };

  Choice.prototype.toString = function() {
    var ref;
    return (ref = this.item()) != null ? ref.toString() : void 0;
  };

  Choice.prototype.equals = function(a) {
    if (a instanceof Choice) {
      return Choice.__super__.equals.call(this, a);
    } else {
      return this._nlst()[this.num.get()].equals(a);
    }
  };

  Choice.prototype._set = function(value) {
    var i, j, len, q, ref;
    ref = this._nlst();
    for (j = q = 0, len = ref.length; q < len; j = ++q) {
      i = ref[j];
      if (i.equals(value)) {
        return this.num.set(j);
      }
    }
    return this.num.set(value);
  };

  Choice.prototype._nlst = function() {
    var l, len, q, ref, results;
    ref = this.lst;
    results = [];
    for (q = 0, len = ref.length; q < len; q++) {
      l = ref[q];
      if (this.filter(l)) {
        results.push(l);
      }
    }
    return results;
  };

  return Choice;

})(Model);

root = typeof _root_obj === "undefined" ? global : window;

root.Bool = (function(superClass) {
  extend(Bool, superClass);

  function Bool(data) {
    Bool.__super__.constructor.call(this);
    this._data = false;
    if (data != null) {
      this._set(data);
    }
  }

  Bool.prototype.toggle = function() {
    return this.set(!this._data);
  };

  Bool.prototype.toBoolean = function() {
    return this._data;
  };

  Bool.prototype.deep_copy = function() {
    return new Bool(this._data);
  };

  Bool.prototype._set = function(value) {
    var n;
    if (n instanceof Model) {
      n = value.toBoolean();
    } else if (value === "false") {
      n = false;
    } else if (value === "true") {
      n = true;
    } else {
      n = Boolean(value);
    }
    if (this._data !== n) {
      this._data = n;
      return true;
    }
    return false;
  };

  Bool.prototype._get_fs_data = function(out) {
    FileSystem.set_server_id_if_necessary(out, this);
    return out.mod += "C " + this._server_id + " " + (1 * Boolean(this._data)) + " ";
  };

  return Bool;

})(Obj);

root = typeof _root_obj === "undefined" ? global : window;

root.ConstOrNotModel = (function(superClass) {
  extend(ConstOrNotModel, superClass);

  function ConstOrNotModel(bool, model, check_disabled) {
    if (check_disabled == null) {
      check_disabled = true;
    }
    ConstOrNotModel.__super__.constructor.call(this);
    this.add_attr({
      bool: bool,
      model: model,
      check_disabled: check_disabled
    });
  }

  ConstOrNotModel.prototype.get = function() {
    var ref;
    return (ref = this.model) != null ? ref.get() : void 0;
  };

  ConstOrNotModel.prototype.set = function(value) {
    var ref;
    return (ref = this.model) != null ? ref.set(value) : void 0;
  };

  ConstOrNotModel.prototype.toString = function() {
    var ref;
    return (ref = this.model) != null ? ref.toString() : void 0;
  };

  return ConstOrNotModel;

})(Model);

root = typeof _root_obj === "undefined" ? global : window;

root.ConstrainedVal = (function(superClass) {
  extend(ConstrainedVal, superClass);

  function ConstrainedVal(value, params) {
    if (params == null) {
      params = {};
    }
    ConstrainedVal.__super__.constructor.call(this);
    this.add_attr({
      val: value || 0,
      _min: params.min != null ? params.min : 0,
      _max: params.max != null ? params.max : 100
    });
    this.add_attr({
      _div: params.div != null ? params.div : this._max - this._min
    });
  }

  ConstrainedVal.prototype.get = function() {
    return this.val.get();
  };

  ConstrainedVal.prototype.ratio = function() {
    return (this.val.get() - this._min.get()) / this.delta();
  };

  ConstrainedVal.prototype.delta = function() {
    return this._max.get() - this._min.get();
  };

  ConstrainedVal.prototype.set_params = function(params) {
    this._min.set(params.min != null ? params.min : 0);
    this._max.set(params.max != null ? params.max : 100);
    return this._div.set(params.div != null ? params.div : this._max - this._min);
  };

  ConstrainedVal.prototype._set = function(value) {
    var res;
    if (value instanceof ConstrainedVal) {
      return this.val._set(value.get());
    }
    res = this.val.set(value);
    this._check_val();
    return res;
  };

  ConstrainedVal.prototype._check_val = function() {
    var d, m, n, r, s, v;
    v = this.val.get();
    m = this._min.get();
    n = this._max.get();
    d = this._div.get();
    if (v < m) {
      this.val.set(m);
    }
    if (v > n) {
      this.val.set(n);
    }
    if (d) {
      s = (n - m) / d;
      r = m + Math.round((this.val.get() - m) / s) * s;
      return this.val.set(r);
    }
  };

  return ConstrainedVal;

})(Model);

root = typeof _root_obj === "undefined" ? global : window;

root.Lst = (function(superClass) {
  extend(Lst, superClass);

  function Lst(data) {
    var d, i, q, ref, s;
    Lst.__super__.constructor.call(this);
    this.length = 0;
    s = this.static_length();
    if (s >= 0) {
      d = this.default_value();
      for (i = q = 0, ref = s; 0 <= ref ? q < ref : q > ref; i = 0 <= ref ? ++q : --q) {
        this.push(d, true);
      }
    }
    if (data != null) {
      this._set(data);
    }
  }

  Lst.prototype.static_length = function() {
    return -1;
  };

  Lst.prototype.default_value = function() {
    return 0;
  };

  Lst.prototype.base_type = function() {
    return void 0;
  };

  Lst.prototype.get = function() {
    var i, len, q, results;
    results = [];
    for (q = 0, len = this.length; q < len; q++) {
      i = this[q];
      results.push(i.get());
    }
    return results;
  };

  Lst.prototype.size = function() {
    return [length];
  };

  Lst.prototype.toString = function() {
    var l, x;
    if (this.length) {
      l = (function() {
        var len, q, results;
        results = [];
        for (q = 0, len = this.length; q < len; q++) {
          x = this[q];
          results.push(x.toString());
        }
        return results;
      }).call(this);
      return l.join();
    } else {
      return "";
    }
  };

  Lst.prototype.equals = function(lst) {
    var i, q, ref;
    if (this.length !== lst.length) {
      return false;
    }
    for (i = q = 0, ref = this.length; 0 <= ref ? q < ref : q > ref; i = 0 <= ref ? ++q : --q) {
      if (!this[i].equals(lst[i])) {
        return false;
      }
    }
    return true;
  };

  Lst.prototype.push = function(value, force) {
    var b;
    if (force == null) {
      force = false;
    }
    if (this._static_size_check(force)) {
      return;
    }
    b = this.base_type();
    if (b != null) {
      if (!(value instanceof b)) {
        value = new b(value);
      }
    } else {
      value = ModelProcessManager.conv(value);
    }
    if (indexOf.call(value._parents, this) < 0) {
      value._parents.push(this);
    }
    this[this.length] = value;
    this.length += 1;
    return this._signal_change();
  };

  Lst.prototype.pop = function() {
    var old;
    if (this._static_size_check(false)) {
      return;
    }
    if (this.length <= 0) {
      return;
    }
    this.length -= 1;
    old = this[this.length];
    this.rem_attr(this.length);
    return old;
  };

  Lst.prototype.clear = function() {
    var results;
    results = [];
    while (this.length) {
      results.push(this.pop());
    }
    return results;
  };

  Lst.prototype.unshift = function(element) {
    var b, i, q, ref;
    if (this._static_size_check(false)) {
      return;
    }
    b = this.base_type();
    if (b != null) {
      if (!(element instanceof b)) {
        element = new b(element);
      }
    } else {
      element = ModelProcessManager.conv(element);
    }
    if (indexOf.call(element._parents, this) < 0) {
      element._parents.push(this);
    }
    if (this.length) {
      for (i = q = ref = this.length - 1; ref <= 0 ? q <= 0 : q >= 0; i = ref <= 0 ? ++q : --q) {
        this[i + 1] = this[i];
      }
    }
    this[0] = element;
    this.length += 1;
    this._signal_change();
    return this.length;
  };

  Lst.prototype.shift = function() {
    var r;
    r = this[0];
    this.splice(0, 1);
    return r;
  };

  Lst.prototype.remove = function(item) {
    var i;
    i = this.indexOf(item);
    if (i >= 0) {
      return this.splice(i, 1);
    }
  };

  Lst.prototype.remove_ref = function(item) {
    var i;
    i = this.indexOf_ref(item);
    if (i >= 0) {
      return this.splice(i, 1);
    }
  };

  Lst.prototype.filter = function(f) {
    var i, len, q, results;
    results = [];
    for (q = 0, len = this.length; q < len; q++) {
      i = this[q];
      if (f(i)) {
        results.push(i);
      }
    }
    return results;
  };

  Lst.prototype.detect = function(f) {
    var i, len, q;
    for (q = 0, len = this.length; q < len; q++) {
      i = this[q];
      if (f(i)) {
        return i;
      }
    }
    return void 0;
  };

  Lst.prototype.sorted = function(fun_sort) {
    var it, len, new_array, q;
    new_array = new Array;
    for (q = 0, len = this.length; q < len; q++) {
      it = this[q];
      new_array.push(it);
    }
    new_array.sort(fun_sort);
    return new_array;
  };

  Lst.prototype.has = function(f) {
    var i, len, q;
    for (q = 0, len = this.length; q < len; q++) {
      i = this[q];
      if (f(i)) {
        return true;
      }
    }
    return false;
  };

  Lst.prototype.indexOf = function(v) {
    var i, q, ref;
    for (i = q = 0, ref = this.length; 0 <= ref ? q < ref : q > ref; i = 0 <= ref ? ++q : --q) {
      if (this[i].equals(v)) {
        return i;
      }
    }
    return -1;
  };

  Lst.prototype.indexOf_ref = function(v) {
    var i, q, ref;
    for (i = q = 0, ref = this.length; 0 <= ref ? q < ref : q > ref; i = 0 <= ref ? ++q : --q) {
      if (this[i] === v) {
        return i;
      }
    }
    return -1;
  };

  Lst.prototype.contains = function(v) {
    return this.indexOf(v) >= 0;
  };

  Lst.prototype.contains_ref = function(v) {
    return this.indexOf_ref(v) >= 0;
  };

  Lst.prototype.toggle = function(v) {
    var i;
    i = this.indexOf(v);
    if (i >= 0) {
      this.splice(i);
      return false;
    } else {
      this.push(v);
      return true;
    }
  };

  Lst.prototype.toggle_ref = function(v) {
    var i;
    i = this.indexOf_ref(v);
    if (i >= 0) {
      this.splice(i);
      return false;
    } else {
      this.push(v);
      return true;
    }
  };

  Lst.prototype.slice = function(begin, end) {
    var i, q, ref, ref1, tab;
    if (end == null) {
      end = this.length;
    }
    if (begin < 0) {
      begin = 0;
    }
    if (end > this.length) {
      end = this.length;
    }
    tab = new Lst;
    for (i = q = ref = begin, ref1 = end; ref <= ref1 ? q < ref1 : q > ref1; i = ref <= ref1 ? ++q : --q) {
      tab.push(this[i].get());
    }
    return tab;
  };

  Lst.prototype.concat = function(new_tab, force) {
    var el, len, q;
    if (force == null) {
      force = false;
    }
    if (this._static_size_check(force)) {
      return;
    }
    if (new_tab.length) {
      for (q = 0, len = new_tab.length; q < len; q++) {
        el = new_tab[q];
        this.push(el);
      }
      return this;
    }
  };

  Lst.prototype.splice = function(index, n) {
    var i, q, ref, ref1, ref2, ref3, ref4, ref5, t, w;
    if (n == null) {
      n = 1;
    }
    if (this._static_size_check(false)) {
      return;
    }
    for (i = q = ref = index, ref1 = Math.min(index + n, this.length); ref <= ref1 ? q < ref1 : q > ref1; i = ref <= ref1 ? ++q : --q) {
      this.rem_attr(i);
    }
    for (i = t = ref2 = index, ref3 = this.length - n; ref2 <= ref3 ? t < ref3 : t > ref3; i = ref2 <= ref3 ? ++t : --t) {
      this[i] = this[i + n];
    }
    for (i = w = ref4 = this.length - n, ref5 = this.length; ref4 <= ref5 ? w < ref5 : w > ref5; i = ref4 <= ref5 ? ++w : --w) {
      delete this[i];
    }
    this.length -= n;
    return this._signal_change();
  };

  Lst.prototype.insert = function(index, list) {
    var i, l, len, len1, o, q, results, t;
    if (list.length) {
      l = Math.max(this.length - index, 0);
      o = (function() {
        var q, ref, results;
        results = [];
        for (i = q = 0, ref = l; 0 <= ref ? q < ref : q > ref; i = 0 <= ref ? ++q : --q) {
          results.push(this.pop());
        }
        return results;
      }).call(this);
      o.reverse();
      for (q = 0, len = list.length; q < len; q++) {
        l = list[q];
        this.push(l);
      }
      results = [];
      for (t = 0, len1 = o.length; t < len1; t++) {
        l = o[t];
        results.push(this.push(l));
      }
      return results;
    }
  };

  Lst.prototype.set_or_push = function(index, val) {
    if (index < this.length) {
      return this.mod_attr(index, val);
    } else if (index === this.length) {
      return this.push(val);
    }
  };

  Lst.prototype.trim = function(size) {
    var results;
    results = [];
    while (this.length > size) {
      results.push(this.pop());
    }
    return results;
  };

  Lst.prototype.join = function(sep) {
    return this.get().join(sep);
  };

  Lst.prototype.deep_copy = function() {
    var i, q, ref, res;
    res = new Lst;
    for (i = q = 0, ref = this.length; 0 <= ref ? q < ref : q > ref; i = 0 <= ref ? ++q : --q) {
      res.push(this[i].deep_copy());
    }
    return res;
  };

  Lst.prototype.back = function() {
    return this[this.length - 1];
  };

  Lst.prototype.real_change = function() {
    var a, len, q;
    if (this.has_been_directly_modified()) {
      return true;
    }
    for (q = 0, len = this.length; q < len; q++) {
      a = this[q];
      if (a.real_change()) {
        return true;
      }
    }
    return false;
  };

  Lst.prototype._set = function(value) {
    var change, p, q, ref, s;
    change = this.length !== value.length;
    s = this.static_length();
    if (s >= 0 && change) {
      console.error("resizing a static array (type " + (ModelProcessManager.get_object_class(this)) + ") is forbidden");
    }
    for (p = q = 0, ref = value.length; 0 <= ref ? q < ref : q > ref; p = 0 <= ref ? ++q : --q) {
      if (p < this.length) {
        change |= this[p].set(value[p]);
      } else if (s < 0) {
        this.push(value[p]);
      }
    }
    if (s < 0) {
      while (this.length > value.length) {
        this.pop();
      }
      this.length = value.length;
    }
    return change;
  };

  Lst.prototype._get_flat_model_map = function(map, date) {
    var len, obj, q, results;
    map[this.model_id] = this;
    results = [];
    for (q = 0, len = this.length; q < len; q++) {
      obj = this[q];
      if (map[obj.model_id] == null) {
        if (obj._date_last_modification > date) {
          results.push(obj._get_flat_model_map(map, date));
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Lst.prototype._get_fs_data = function(out) {
    var obj, str;
    FileSystem.set_server_id_if_necessary(out, this);
    str = (function() {
      var len, q, results;
      results = [];
      for (q = 0, len = this.length; q < len; q++) {
        obj = this[q];
        FileSystem.set_server_id_if_necessary(out, obj);
        results.push(obj._server_id);
      }
      return results;
    }).call(this);
    return out.mod += "C " + this._server_id + " " + (str.join(",")) + " ";
  };

  Lst.prototype._get_state = function() {
    var obj, str;
    str = (function() {
      var len, q, results;
      results = [];
      for (q = 0, len = this.length; q < len; q++) {
        obj = this[q];
        results.push(obj.model_id);
      }
      return results;
    }).call(this);
    return str.join(",");
  };

  Lst.prototype._set_state = function(str, map) {
    var attr, k_id, l_id, q, ref, ref1, ref2, results, t;
    l_id = str.split(",").filter(function(x) {
      return x.length;
    });
    while (this.length > l_id.length) {
      this.pop();
    }
    for (attr = q = 0, ref = this.length; 0 <= ref ? q < ref : q > ref; attr = 0 <= ref ? ++q : --q) {
      k_id = l_id[attr];
      if (map[k_id].buff != null) {
        if (map[k_id].buff !== this[attr]) {
          this.mod_attr(attr, map[k_id].buff);
        }
      } else if (!this[attr]._set_state_if_same_type(k_id, map)) {
        this.mod_attr(attr, ModelProcessManager._new_model_from_state(k_id, map));
      }
    }
    results = [];
    for (attr = t = ref1 = this.length, ref2 = l_id.length; ref1 <= ref2 ? t < ref2 : t > ref2; attr = ref1 <= ref2 ? ++t : --t) {
      k_id = l_id[attr];
      if (map[k_id].buff != null) {
        results.push(this.push(map[k_id].buff));
      } else {
        results.push(this.push(ModelProcessManager._new_model_from_state(k_id, map)));
      }
    }
    return results;
  };

  Lst.prototype._static_size_check = function(force) {
    if (this.static_length() >= 0 && !force) {
      console.error("resizing a static array (type " + (ModelProcessManager.get_object_class(this)) + ") is forbidden");
      return true;
    }
    return false;
  };

  return Lst;

})(Model);

root = typeof _root_obj === "undefined" ? global : window;

root.Val = (function(superClass) {
  extend(Val, superClass);

  function Val(data) {
    Val.__super__.constructor.call(this);
    this._data = 0;
    if (data != null) {
      this._set(data);
    }
  }

  Val.prototype.toggle = function() {
    return this.set(!this._data);
  };

  Val.prototype.toBoolean = function() {
    return Boolean(this._data);
  };

  Val.prototype.deep_copy = function() {
    return new Val(this._data);
  };

  Val.prototype.add = function(v) {
    if (v) {
      this._data += v;
      return this._signal_change();
    }
  };

  Val.prototype._set = function(value) {
    var n;
    if (typeof value === "string") {
      if (value.slice(0, 2) === "0x") {
        n = parseInt(value, 16);
      } else {
        n = parseFloat(value);
        if (isNaN(n)) {
          n = parseInt(value);
        }
        if (isNaN(n)) {
          console.log("Don't know how to transform " + value + " to a Val");
        }
      }
    } else if (typeof value === "boolean") {
      n = 1 * value;
    } else if (value instanceof Val) {
      n = value._data;
    } else {
      n = value;
    }
    if (this._data !== n) {
      this._data = n;
      return true;
    }
    return false;
  };

  return Val;

})(Obj);

root = typeof _root_obj === "undefined" ? global : window;

root.Vec = (function(superClass) {
  extend(Vec, superClass);

  function Vec(data) {
    Vec.__super__.constructor.call(this, data);
  }

  Vec.prototype.base_type = function() {
    return Val;
  };

  Vec.prototype._underlying_fs_type = function() {
    return "Lst";
  };

  return Vec;

})(Lst);

root = typeof _root_obj === "undefined" ? global : window;

root.Str = (function(superClass) {
  extend(Str, superClass);

  function Str(data) {
    Str.__super__.constructor.call(this);
    this._data = "";
    this.length = 0;
    if (data != null) {
      this._set(data);
    }
  }

  Str.prototype.toggle = function(str, space) {
    var i, l;
    if (space == null) {
      space = " ";
    }
    l = this._data.split(space);
    i = l.indexOf(str);
    if (i < 0) {
      l.push(str);
    } else {
      l.splice(i, 1);
    }
    return this.set(l.join(" "));
  };

  Str.prototype.contains = function(str) {
    return this._data.indexOf(str) >= 0;
  };

  Str.prototype.equals = function(str) {
    return this._data === str.toString();
  };

  Str.prototype.ends_with = function(str) {
    var l;
    l = this._data.match(str + "$");
    return (l != null ? l.length : void 0) && l[0] === str;
  };

  Str.prototype.deep_copy = function() {
    return new Str(this._data + "");
  };

  Str.prototype._get_fs_data = function(out) {
    FileSystem.set_server_id_if_necessary(out, this);
    return out.mod += "C " + this._server_id + " " + (encodeURI(this._data)) + " ";
  };

  Str.prototype._set = function(value) {
    var n;
    if (value == null) {
      return this._set("");
    }
    n = value.toString();
    if (this._data !== n) {
      this._data = n;
      this.length = this._data.length;
      return true;
    }
    return false;
  };

  Str.prototype._get_state = function() {
    return encodeURI(this._data);
  };

  Str.prototype._set_state = function(str, map) {
    return this.set(decodeURIComponent(str));
  };

  return Str;

})(Obj);

root = typeof _root_obj === "undefined" ? global : window;

root.TypedArray = (function(superClass) {
  extend(TypedArray, superClass);

  function TypedArray(size, data) {
    var B;
    TypedArray.__super__.constructor.call(this);
    if (size == null) {
      size = [];
    }
    if (!size.length) {
      size = [size];
    }
    this._size = size;
    if (data == null) {
      B = this.base_type();
      data = new B(this.nb_items());
    }
    this._data = data;
  }

  TypedArray.prototype.base_type = function() {};

  TypedArray.prototype.dim = function() {
    return this._size.length;
  };

  TypedArray.prototype.size = function(d) {
    if (d != null) {
      return this._size[d];
    } else {
      return this._size;
    }
  };

  TypedArray.prototype.set_val = function(index, value) {
    index = this._get_index(index);
    if (this._data[index] !== value) {
      this._data[index] = value;
      return this._signal_change();
    }
  };

  TypedArray.prototype.nb_items = function() {
    var i, len, q, ref, tot;
    tot = this._size[0] || 0;
    ref = this._size.slice(1);
    for (q = 0, len = ref.length; q < len; q++) {
      i = ref[q];
      tot *= i;
    }
    return tot;
  };

  TypedArray.prototype.toString = function() {
    var i, j, l, len, m, o, q, ref, ref1, res, s, t, v;
    m = 1;
    res = "";
    l = (function() {
      var len, q, ref, results;
      ref = this._size;
      results = [];
      for (q = 0, len = ref.length; q < len; q++) {
        s = ref[q];
        o = m;
        m *= s;
        results.push(o);
      }
      return results;
    }).call(this);
    ref = this._data;
    for (i = q = 0, len = ref.length; q < len; i = ++q) {
      v = ref[i];
      res += v;
      for (j = t = ref1 = l.length - 1; ref1 <= 0 ? t <= 0 : t >= 0; j = ref1 <= 0 ? ++t : --t) {
        if (i % l[j] === l[j] - 1) {
          res += [" ", "\n", "\n\n"][j];
          break;
        }
      }
    }
    return res;
  };

  TypedArray.prototype.equals = function(obj) {
    var i, len, q, ref, v;
    if (obj instanceof TypedArray) {
      if (this._size.length !== obj._size.length) {
        return false;
      }
      ref = this._size;
      for (i = q = 0, len = ref.length; q < len; i = ++q) {
        v = ref[i];
        if (v !== obj._size[i]) {
          return false;
        }
      }
      return this._data === obj._data;
    }
    return this._data === obj;
  };

  TypedArray.prototype.get = function(index) {
    if (index != null) {
      return this._data[this._get_index(index)];
    } else {
      return this._data;
    }
  };

  TypedArray.prototype.resize = function(new_size) {
    var B, len, n, q, s, tot;
    tot = 1;
    for (q = 0, len = new_size.length; q < len; q++) {
      s = new_size[q];
      tot *= s;
    }
    B = this.base_type();
    n = new B(tot);
    n.set(this._data);
    this._data = n;
    this._size = new_size;
    return this._signal_change();
  };

  TypedArray.prototype._set = function(str) {
    var B;
    if (typeof str === "string") {
      this._set_state(str, {});
      return true;
    }
    if (this._data !== value || this._size.length !== 1 || this._size[0] !== value.length) {
      B = this.base_type();
      this._data = new B(value);
      this._size = [value.length];
      return true;
    }
    return false;
  };

  TypedArray.prototype._get_index = function(index) {
    var i, m, o, q, ref;
    if (index.length) {
      o = 0;
      m = 1;
      for (i = q = 0, ref = index.length; 0 <= ref ? q < ref : q > ref; i = 0 <= ref ? ++q : --q) {
        o += m * index[i];
        m *= this._size[i];
      }
      return o;
    }
    return index;
  };

  TypedArray.prototype._get_fs_data = function(out) {
    FileSystem.set_server_id_if_necessary(out, this);
    return out.mod += "C " + this._server_id + " " + (this._get_state()) + " ";
  };

  TypedArray.prototype._get_state = function() {
    var d, len, len1, q, ref, ref1, res, s, t;
    res = "";
    res += this._size.length;
    ref = this._size;
    for (q = 0, len = ref.length; q < len; q++) {
      s = ref[q];
      res += "," + s;
    }
    ref1 = this._data;
    for (t = 0, len1 = ref1.length; t < len1; t++) {
      d = ref1[t];
      res += "," + d;
    }
    return res;
  };

  TypedArray.prototype._set_state = function(str, map) {
    var B, l, n, q, ref, results, s, v;
    l = str.split(",");
    s = parseInt(l[0]);
    this._size = (function() {
      var q, ref, results;
      results = [];
      for (v = q = 0, ref = s; 0 <= ref ? q < ref : q > ref; v = 0 <= ref ? ++q : --q) {
        results.push(parseInt(l[v + 1]));
      }
      return results;
    })();
    B = this.base_type();
    n = this.nb_items();
    this._data = new B(n);
    results = [];
    for (v = q = 0, ref = n; 0 <= ref ? q < ref : q > ref; v = 0 <= ref ? ++q : --q) {
      results.push(this._data[v] = parseFloat(l[s + 1 + v]));
    }
    return results;
  };

  return TypedArray;

})(Model);

root = typeof _root_obj === "undefined" ? global : window;

root.TypedArray_Float32 = (function(superClass) {
  extend(TypedArray_Float32, superClass);

  function TypedArray_Float32(size, data) {
    if (size == null) {
      size = [];
    }
    TypedArray_Float32.__super__.constructor.call(this, size, data);
  }

  TypedArray_Float32.prototype.base_type = function() {
    return Float32Array;
  };

  TypedArray_Float32.prototype.deep_copy = function() {
    return new TypedArray_Float32(this._size, this._data);
  };

  return TypedArray_Float32;

})(TypedArray);

root = typeof _root_obj === "undefined" ? global : window;

root.TypedArray_Float64 = (function(superClass) {
  extend(TypedArray_Float64, superClass);

  function TypedArray_Float64(size, data) {
    if (size == null) {
      size = [];
    }
    TypedArray_Float64.__super__.constructor.call(this, size, data);
  }

  TypedArray_Float64.prototype.base_type = function() {
    return Float64Array;
  };

  TypedArray_Float64.prototype.deep_copy = function() {
    return new TypedArray_Float64(this._size, this._data);
  };

  return TypedArray_Float64;

})(TypedArray);

root = typeof _root_obj === "undefined" ? global : window;

root.TypedArray_Int32 = (function(superClass) {
  extend(TypedArray_Int32, superClass);

  function TypedArray_Int32(size, data) {
    if (size == null) {
      size = [];
    }
    TypedArray_Int32.__super__.constructor.call(this, size, data);
  }

  TypedArray_Int32.prototype.base_type = function() {
    return Int32Array;
  };

  TypedArray_Int32.prototype.deep_copy = function() {
    return new TypedArray_Int32(this._size, this._data);
  };

  return TypedArray_Int32;

})(TypedArray);

root = typeof _root_obj === "undefined" ? global : window;

root.FileSystem = (function() {
  var XMLHttpRequest_node;

  FileSystem._cur_tmp_server_id = 0;

  FileSystem._sig_server = true;

  FileSystem._disp = false;

  FileSystem._userid = "644";

  if (typeof global !== 'undefined') {
    XMLHttpRequest_node = require('xhr2');
    FileSystem._XMLHttpRequest = XMLHttpRequest_node;
  }

  FileSystem._objects_to_send = {};

  FileSystem._timer_send = void 0;

  FileSystem._timer_chan = void 0;

  FileSystem._nb_callbacks = 0;

  FileSystem._callbacks = {};

  FileSystem._nb_insts = 0;

  FileSystem._insts = {};

  FileSystem._files_to_upload = {};

  FileSystem._ptr_to_update = {};

  FileSystem._tmp_objects = {};

  FileSystem._objects = {};

  FileSystem._url = "127.0.0.1";

  FileSystem._port = "8888";

  FileSystem.url_com = "/sceen/_";

  FileSystem.url_upload = "/sceen/upload";

  if (typeof global !== 'undefined') {
    FileSystem.CONNECTOR_TYPE = "Node";
  } else {
    FileSystem.CONNECTOR_TYPE = "Browser";
  }

  function FileSystem() {
    this._data_to_send = "";
    this._session_num = -2;
    this._num_inst = FileSystem._nb_insts++;
    FileSystem._insts[this._num_inst] = this;
    if (FileSystem._userid != null) {
      this.send("U " + FileSystem._userid + " " + FileSystem._password + " ");
    }
    this.send("S " + this._num_inst + " ");
  }

  FileSystem.prototype.load = function(path, callback) {
    FileSystem._send_chan();
    this.send("L " + FileSystem._nb_callbacks + " " + (encodeURI(path)) + " ");
    FileSystem._callbacks[FileSystem._nb_callbacks] = callback;
    return FileSystem._nb_callbacks++;
  };

  FileSystem.prototype.load_or_make_dir = function(dir, callback) {
    return this.load(dir, (function(_this) {
      return function(res, err) {
        var lst, nir, oir, v;
        if (err) {
          if (dir === "/") {
            return callback(0, err);
          } else {
            lst = (function() {
              var len, q, ref, results;
              ref = dir.split('/');
              results = [];
              for (q = 0, len = ref.length; q < len; q++) {
                v = ref[q];
                if (v.length) {
                  results.push(v);
                }
              }
              return results;
            })();
            nir = lst.pop();
            oir = "/" + lst.join("/");
            return _this.load_or_make_dir(oir, function(n_res, n_err) {
              var n_dir;
              if (n_err) {
                return callback(0, n_err);
              } else {
                n_dir = new Directory;
                n_res.add_file(nir, n_dir);
                return callback(n_dir, n_err);
              }
            });
          }
        } else {
          return callback(res, err);
        }
      };
    })(this));
  };

  FileSystem.prototype.load_ptr = function(ptr, callback) {
    FileSystem._send_chan();
    this.send("l " + FileSystem._nb_callbacks + " " + ptr + " ");
    FileSystem._callbacks[FileSystem._nb_callbacks] = callback;
    return FileSystem._nb_callbacks++;
  };

  FileSystem.prototype.send = function(data) {
    this._data_to_send += data;
    if (FileSystem._timer_send == null) {
      return FileSystem._timer_send = setTimeout(FileSystem._timeout_send_func, 1);
    }
  };

  FileSystem.prototype.make_channel = function() {
    var path, xhr_object;
    path = "";
    if (FileSystem.CONNECTOR_TYPE === "Browser") {
      path = FileSystem.url_com + ("?s=" + this._session_num);
    } else if (FileSystem.CONNECTOR_TYPE === "Node") {
      path = "http://" + FileSystem._url + ":" + FileSystem._port + FileSystem.url_com + ("?s=" + this._session_num);
    }
    xhr_object = FileSystem._my_xml_http_request();
    xhr_object.open('GET', path, true);
    xhr_object.onreadystatechange = function() {
      var _w;
      if (this.readyState === 4 && this.status === 200) {
        if (FileSystem._disp) {
          console.log("chan ->", this.responseText);
        }
        _w = function(sid, obj) {
          if ((sid != null) && (obj != null)) {
            obj._server_id = sid;
            return FileSystem._objects[sid] = obj;
          }
        };
        FileSystem._sig_server = false;
        eval(this.responseText);
        return FileSystem._sig_server = true;
      }
    };
    return xhr_object.send();
  };

  FileSystem.get_inst = function() {
    var i, k, ref;
    ref = FileSystem._insts;
    for (k in ref) {
      i = ref[k];
      return i;
    }
    return new FileSystem;
  };

  FileSystem.set_server_id_if_necessary = function(out, obj) {
    var ncl;
    if (obj._server_id == null) {
      obj._server_id = FileSystem._get_new_tmp_server_id();
      FileSystem._tmp_objects[obj._server_id] = obj;
      ncl = ModelProcessManager.get_object_class(obj);
      if (obj._underlying_fs_type != null) {
        out.mod += "T " + obj._server_id + " " + ncl + " ";
        ncl = obj._underlying_fs_type();
      }
      out.cre += "N " + obj._server_id + " " + ncl + " ";
      return obj._get_fs_data(out);
    }
  };

  FileSystem.signal_change = function(m) {
    if (FileSystem._sig_server) {
      FileSystem._objects_to_send[m.model_id] = m;
      if (FileSystem._timer_chan != null) {
        clearTimeout(FileSystem._timer_chan);
      }
      return FileSystem._timer_chan = setTimeout(FileSystem._timeout_chan_func, 250);
    }
  };

  FileSystem._tmp_id_to_real = function(tmp_id, res) {
    var fs, path, ptr, tmp, xhr_object;
    tmp = FileSystem._tmp_objects[tmp_id];
    if (tmp == null) {
      console.log(tmp_id);
    }
    FileSystem._objects[res] = tmp;
    tmp._server_id = res;
    delete FileSystem._tmp_objects[tmp_id];
    ptr = FileSystem._ptr_to_update[tmp_id];
    if (ptr != null) {
      delete FileSystem._ptr_to_update[tmp_id];
      ptr.data.value = res;
    }
    if ((FileSystem._files_to_upload[tmp_id] != null) && (tmp.file != null)) {
      delete FileSystem._files_to_upload[tmp_id];
      fs = FileSystem.get_inst();
      path = "";
      if (FileSystem.CONNECTOR_TYPE === "Browser") {
        path = FileSystem.url_com + ("?s=" + fs._session_num + "&p=" + tmp._server_id);
      } else if (FileSystem.CONNECTOR_TYPE === "Node") {
        path = "http://" + FileSystem._url + ":" + FileSystem._port + FileSystem.url_com + ("?s=" + fs._session_num + "&p=" + tmp._server_id);
      }
      xhr_object = FileSystem._my_xml_http_request();
      xhr_object.open('PUT', path, true);
      xhr_object.onreadystatechange = function() {
        var _w;
        if (this.readyState === 4 && this.status === 200) {
          _w = function(sid, obj) {
            if ((sid != null) && (obj != null)) {
              obj._server_id = sid;
              return FileSystem._objects[sid] = obj;
            }
          };
          return eval(this.responseText);
        }
      };
      xhr_object.send(tmp.file);
      return delete tmp.file;
    }
  };

  FileSystem._get_new_tmp_server_id = function() {
    FileSystem._cur_tmp_server_id++;
    if (FileSystem._cur_tmp_server_id % 4 === 0) {
      FileSystem._cur_tmp_server_id++;
    }
    return FileSystem._cur_tmp_server_id;
  };

  FileSystem._send_chan = function() {
    var f, k, out, ref, results;
    out = FileSystem._get_chan_data();
    ref = FileSystem._insts;
    results = [];
    for (k in ref) {
      f = ref[k];
      results.push(f.send(out));
    }
    return results;
  };

  FileSystem._timeout_chan_func = function() {
    FileSystem._send_chan();
    return delete FileSystem._timer_chan;
  };

  FileSystem._get_chan_data = function() {
    var model, n, out, ref;
    out = {
      cre: "",
      mod: ""
    };
    ref = FileSystem._objects_to_send;
    for (n in ref) {
      model = ref[n];
      model._get_fs_data(out);
    }
    FileSystem._objects_to_send = {};
    return out.cre + out.mod;
  };

  FileSystem._timeout_send_func = function() {
    var f, k, out, path, ref, ref1, xhr_object;
    out = FileSystem._get_chan_data();
    ref = FileSystem._insts;
    for (k in ref) {
      f = ref[k];
      f._data_to_send += out;
    }
    ref1 = FileSystem._insts;
    for (k in ref1) {
      f = ref1[k];
      if (!f._data_to_send.length) {
        continue;
      }
      if (f._session_num === -1) {
        continue;
      }
      if (f._session_num === -2) {
        f._session_num = -1;
      } else {
        f._data_to_send = ("s " + f._session_num + " ") + f._data_to_send;
      }
      path = "";
      if (FileSystem.CONNECTOR_TYPE === "Browser") {
        path = FileSystem.url_com;
      } else if (FileSystem.CONNECTOR_TYPE === "Node") {
        path = "http://" + FileSystem._url + ":" + FileSystem._port + FileSystem.url_com;
      }
      xhr_object = FileSystem._my_xml_http_request();
      xhr_object.open('POST', path, true);
      xhr_object.onreadystatechange = function() {
        var _c, _w, c, len, q, results;
        if (this.readyState === 4 && this.status === 200) {
          if (FileSystem._disp) {
            console.log("resp ->", this.responseText);
          }
          _c = [];
          _w = function(sid, obj) {
            if ((sid != null) && (obj != null)) {
              obj._server_id = sid;
              return FileSystem._objects[sid] = obj;
            }
          };
          FileSystem._sig_server = false;
          eval(this.responseText);
          FileSystem._sig_server = true;
          results = [];
          for (q = 0, len = _c.length; q < len; q++) {
            c = _c[q];
            results.push(FileSystem._callbacks[c[0]](FileSystem._objects[c[1]], c[2]));
          }
          return results;
        }
      };
      if (FileSystem._disp) {
        console.log("sent ->", f._data_to_send + "E ");
      }
      xhr_object.setRequestHeader('Content-Type', 'text/plain');
      xhr_object.send(f._data_to_send + "E ");
      f._data_to_send = "";
    }
    FileSystem._objects_to_send = {};
    return delete FileSystem._timer_send;
  };

  FileSystem._my_xml_http_request = function() {
    if (FileSystem.CONNECTOR_TYPE === "Browser") {
      if (window.XMLHttpRequest) {
        return new XMLHttpRequest;
      }
      if (window.ActiveXObject) {
        return new ActiveXObject('Microsoft.XMLHTTP');
      }
      return alert('Your browser does not seem to support XMLHTTPRequest objects...');
    } else if (FileSystem.CONNECTOR_TYPE === "Node") {
      return new FileSystem._XMLHttpRequest();
    } else {
      return console.log("you must define CONNECTOR_TYPE");
    }
  };

  return FileSystem;

})();

root = typeof _root_obj === "undefined" ? global : window;

root.Directory = (function(superClass) {
  extend(Directory, superClass);

  function Directory() {
    Directory.__super__.constructor.call(this);
  }

  Directory.prototype.base_type = function() {
    return File;
  };

  Directory.prototype.find = function(name) {
    var f, len, q;
    for (q = 0, len = this.length; q < len; q++) {
      f = this[q];
      if (f.name.equals(name)) {
        return f;
      }
    }
    return void 0;
  };

  Directory.prototype.load = function(name, callback) {
    var f;
    f = this.find(name);
    if (f) {
      return f.load(callback);
    } else {
      return callback(void 0, "file does not exist");
    }
  };

  Directory.prototype.has = function(name) {
    var f, len, q;
    for (q = 0, len = this.length; q < len; q++) {
      f = this[q];
      if (f.name.equals(name)) {
        return true;
      }
    }
    return false;
  };

  Directory.prototype.add_file = function(name, obj, params) {
    var o, res;
    if (params == null) {
      params = {};
    }
    o = this.find(name);
    if (o != null) {
      return o;
    }
    res = new File(name, obj, params);
    this.push(res);
    return res;
  };

  Directory.prototype.add_tiff_file = function(name, obj, tiff_obj, params) {
    var o, res;
    if (params == null) {
      params = {};
    }
    o = this.find(name);
    if (o != null) {
      return o;
    }
    res = new TiffFile(name, obj, tiff_obj, params);
    this.push(res);
    return res;
  };

  Directory.prototype.force_add_file = function(name, obj, params) {
    var find_name, name_file, num, o, res;
    if (params == null) {
      params = {};
    }
    num = this.length;
    find_name = true;
    name_file = name + "_" + num;
    while (find_name) {
      name_file = name + "_" + num;
      o = this.find(name_file);
      if (o != null) {
        num += 1;
      } else {
        break;
      }
    }
    console.log(name_file);
    res = new File(name_file, obj, params);
    this.push(res);
    return res;
  };

  Directory.prototype.get_file_info = function(info) {
    return info.icon = "folder";
  };

  return Directory;

})(Lst);

root = typeof _root_obj === "undefined" ? global : window;

root.File = (function(superClass) {
  extend(File, superClass);

  function File(name, ptr_or_model, info) {
    var cp_info, key, val;
    if (name == null) {
      name = "";
    }
    if (ptr_or_model == null) {
      ptr_or_model = 0;
    }
    if (info == null) {
      info = {};
    }
    File.__super__.constructor.call(this);
    cp_info = {};
    for (key in info) {
      val = info[key];
      cp_info[key] = val;
    }
    if (ptr_or_model instanceof Model) {
      if (cp_info.model_type == null) {
        cp_info.model_type = ModelProcessManager.get_object_class(ptr_or_model);
      }
      if (typeof ptr_or_model.get_file_info === "function") {
        ptr_or_model.get_file_info(cp_info);
      }
    }
    this.add_attr({
      name: name,
      admins: new Lst,
      users: new Lst,
      _created_at: new Date(),
      _ptr: new Ptr(ptr_or_model),
      _info: cp_info
    });
  }

  File.prototype.load = function(callback) {
    return this._ptr.load(callback);
  };

  return File;

})(Model);

root = typeof _root_obj === "undefined" ? global : window;

root.Path = (function(superClass) {
  extend(Path, superClass);

  function Path(file1) {
    var size;
    this.file = file1;
    Path.__super__.constructor.call(this);
    size = this.file != null ? this.file.fileSize != null ? this.file.fileSize : this.file.size : 0;
    this.add_attr({
      remaining: size,
      to_upload: size
    });
  }

  Path.prototype.get_file_info = function(info) {
    info.remaining = this.remaining;
    return info.to_upload = this.to_upload;
  };

  Path.prototype._get_fs_data = function(out) {
    Path.__super__._get_fs_data.call(this, out);
    if ((this.file != null) && this._server_id & 3) {
      return FileSystem._files_to_upload[this._server_id] = this;
    }
  };

  return Path;

})(Model);

root = typeof _root_obj === "undefined" ? global : window;

root.Ptr = (function(superClass) {
  extend(Ptr, superClass);

  function Ptr(model) {
    Ptr.__super__.constructor.call(this);
    this.data = {};
    this._set(model);
  }

  Ptr.prototype.load = function(callback) {
    var ref;
    if (this.data.model != null) {
      return callback(this.data.model, false);
    } else {
      return (ref = FileSystem.get_inst()) != null ? ref.load_ptr(this.data.value, callback) : void 0;
    }
  };

  Ptr.prototype._get_fs_data = function(out) {
    FileSystem.set_server_id_if_necessary(out, this);
    if (this.data.model != null) {
      FileSystem.set_server_id_if_necessary(out, this.data.model);
      out.mod += "C " + this._server_id + " " + this.data.model._server_id + " ";
      this.data.value = this.data.model._server_id;
      if (this.data.model._server_id & 3) {
        return FileSystem._ptr_to_update[this.data.model._server_id] = this;
      }
    } else {
      return out.mod += "C " + this._server_id + " " + this.data.value + " ";
    }
  };

  Ptr.prototype._set = function(model) {
    var res;
    if (typeof model === "number") {
      res = this.data.value !== model;
      this.data = {
        value: model
      };
      return res;
    }
    if (model instanceof Model) {
      res = this.data.value !== model._server_id;
      this.data = {
        model: model,
        value: model._server_id
      };
      return res;
    }
    return false;
  };

  Ptr.prototype._get_state = function() {
    return this._data;
  };

  Ptr.prototype._set_state = function(str, map) {
    return this.set(str);
  };

  return Ptr;

})(Model);

root = typeof _root_obj === "undefined" ? global : window;

root.TiffFile = (function(superClass) {
  extend(TiffFile, superClass);

  function TiffFile(name, ptr_or_model, ptr_tiff, info) {
    if (name == null) {
      name = "";
    }
    if (ptr_or_model == null) {
      ptr_or_model = 0;
    }
    if (ptr_tiff == null) {
      ptr_tiff = 0;
    }
    if (info == null) {
      info = {};
    }
    TiffFile.__super__.constructor.call(this, name, ptr_or_model, info);
    this.add_attr({
      _ptr_tiff: new Ptr(ptr_tiff),
      _has_been_converted: 0
    });
  }

  TiffFile.prototype.load_tiff = function(callback) {
    return this._ptr_tiff.load(callback);
  };

  return TiffFile;

})(File);

root = typeof _root_obj === "undefined" ? global : window;

root.Process = (function() {
  function Process(m, onchange_construction) {
    var i, len, q;
    if (onchange_construction == null) {
      onchange_construction = true;
    }
    this.process_id = ModelProcessManager._cur_process_id;
    ModelProcessManager._cur_process_id += 1;
    this._models = [];
    if (m instanceof Model) {
      m.bind(this, onchange_construction);
    } else if (m.length != null) {
      for (q = 0, len = m.length; q < len; q++) {
        i = m[q];
        i.bind(this, onchange_construction);
      }
    } else if (m != null) {
      console.error("Process constructor doesn't know what to do with", m);
    }
  }

  Process.prototype.destructor = function() {
    var i, len, m, q, ref, results;
    ref = this._models;
    results = [];
    for (q = 0, len = ref.length; q < len; q++) {
      m = ref[q];
      i = m._processes.indexOf(this);
      if (i >= 0) {
        results.push(m._processes.splice(i, 1));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Process.prototype.onchange = function() {};

  return Process;

})();

root.bind = (function(_this) {
  return function(m, f) {
    var i, len, q, results;
    if (m instanceof Model) {
      return m.bind(f);
    } else {
      results = [];
      for (q = 0, len = m.length; q < len; q++) {
        i = m[q];
        results.push(i.bind(f));
      }
      return results;
    }
  };
})(this);

root = typeof _root_obj === "undefined" ? global : window;

root.BindProcess = (function(superClass) {
  extend(BindProcess, superClass);

  function BindProcess(model, onchange_construction, f1) {
    this.f = f1;
    BindProcess.__super__.constructor.call(this, model, onchange_construction);
  }

  BindProcess.prototype.onchange = function() {
    return this.f();
  };

  return BindProcess;

})(Process);

},{"url":7,"xhr2":9}],3:[function(require,module,exports){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

},{}],4:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],5:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],6:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":4,"./encode":5}],7:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"./util":8,"punycode":3,"querystring":6}],8:[function(require,module,exports){
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}],9:[function(require,module,exports){
module.exports = XMLHttpRequest;

},{}]},{},[1]);
